{"version":3,"sources":["util/Spotify.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/Playlist/Playlist.js","Components/SearchBar/SearchBar.js","Components/SearchResults/SearchResults.js","Components/App/App.js","reportWebVitals.js","index.js"],"names":["accessToken","Track","props","addTrack","bind","removeTrack","this","isRemoval","className","onClick","onAdd","track","onRemove","name","artist","album","renderAction","React","Component","TrackList","tracks","map","id","Playlist","handleNameChange","event","onNameChange","target","value","defaultValue","onChange","playlistTracks","onSave","SearchBar","state","term","handleTermChange","search","setState","onSearch","placeholder","SearchResults","searchResults","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","savePlaylist","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris","App","playlistName","updatePlaylistName","find","savedTrack","push","filter","currentTrack","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uPAEIA,E,4GCuCWC,E,kDAnCX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IACDC,SAAW,EAAKA,SAASC,KAAd,gBAChB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBAHL,E,gDAMlB,WACI,OAAIE,KAAKJ,MAAMK,UACJ,wBAAQC,UAAU,eAAeC,QAASH,KAAKD,YAA/C,eAEA,wBAAQG,UAAU,eAAeC,QAASH,KAAKH,SAA/C,iB,sBAIf,WACIG,KAAKJ,MAAMQ,MAAMJ,KAAKJ,MAAMS,S,yBAGhC,WACIL,KAAKJ,MAAMU,SAASN,KAAKJ,MAAMS,S,oBAGnC,WACI,OACI,sBAAKH,UAAU,QAAf,UACI,sBAAKA,UAAU,oBAAf,UACI,6BAAKF,KAAKJ,MAAMS,MAAME,OACtB,8BAAIP,KAAKJ,MAAMS,MAAMG,OAArB,MAAgCR,KAAKJ,MAAMS,MAAMI,YAEpDT,KAAKU,sB,GA/BFC,IAAMC,WCmBXC,E,4JAjBX,WAAS,IAAD,OACJ,OACI,qBAAKX,UAAU,YAAf,SAEQF,KAAKJ,MAAMkB,OAAOC,KAAI,SAAAV,GAClB,OAAO,cAAC,EAAD,CAAOA,MAAOA,EAErBD,MAAO,EAAKR,MAAMQ,MAClBE,SAAW,EAAKV,MAAMU,SACtBL,UAAW,EAAKL,MAAMK,WAHjBI,EAAMW,a,GAPXL,IAAMC,WCwBfK,E,kDAtBX,WAAYrB,GAAO,IAAD,8BACd,cAAMA,IACDsB,iBAAmB,EAAKA,iBAAiBpB,KAAtB,gBAFV,E,oDAKlB,SAAiBqB,GACbnB,KAAKJ,MAAMwB,aAAaD,EAAME,OAAOC,S,oBAGzC,WACI,OACI,sBAAKpB,UAAU,WAAf,UACI,uBAAOqB,aAAc,eAAgBC,SAAUxB,KAAKkB,mBACpD,cAAC,EAAD,CAAWJ,OAAQd,KAAKJ,MAAM6B,eAC9BnB,SAAUN,KAAKJ,MAAMU,SACrBL,WAAW,IACX,wBAAQC,UAAU,gBAAgBC,QAASH,KAAKJ,MAAM8B,OAAtD,oC,GAlBOf,IAAMC,WC6Bde,G,wDA7Bb,WAAY/B,GAAQ,IAAD,8BACjB,cAAMA,IAEDgC,MAAQ,CACXC,KAAM,IAGR,EAAKC,iBAAmB,EAAKA,iBAAiBhC,KAAtB,gBACxB,EAAKiC,OAAS,EAAKA,OAAOjC,KAAZ,gBARG,E,oDAWnB,SAAiBqB,GACfnB,KAAKgC,SAAS,CAACH,KAAMV,EAAME,OAAOC,U,oBAGpC,WACEtB,KAAKJ,MAAMqC,SAASjC,KAAK4B,MAAMC,Q,oBAGjC,WACE,OACE,sBAAK3B,UAAU,YAAf,UACE,uBAAOgC,YAAY,qBAAqBV,SAAUxB,KAAK8B,mBACvD,wBAAQ5B,UAAU,eAAeC,QAASH,KAAK+B,OAA/C,2B,GAxBgBpB,IAAMC,YCafuB,G,kKAVX,WACI,OACI,sBAAKjC,UAAU,gBAAf,UACI,yCACA,cAAC,EAAD,CAAWY,OAAQd,KAAKJ,MAAMwC,cAAehC,MAAOJ,KAAKJ,MAAMQ,MAAOH,WAAW,W,GANrEU,IAAMC,YLD5ByB,EAAU,CACZC,eADY,WAEV,GAAI5C,EACF,OAAOA,EAGT,IAAM6C,EAAmBC,OAAOC,SAASC,KAAKC,MAAM,wBAC9CC,EAAiBJ,OAAOC,SAASC,KAAKC,MAAM,sBAClD,GAAIJ,GAAoBK,EAAgB,CACtClD,EAAc6C,EAAiB,GAC/B,IAAMM,EAAYC,OAAOF,EAAe,IAGxC,OAFAJ,OAAOO,YAAW,kBAAMrD,EAAc,KAAgB,IAAZmD,GAC1CL,OAAOQ,QAAQC,UAAU,eAAgB,KAAM,KACxCvD,EAEP,IAAMwD,EAAS,2DAnBN,mCAmBM,0EAlBH,sCAmBZV,OAAOC,SAAWS,GAItBnB,OApBY,SAoBLF,GACL,IAAMnC,EAAc2C,EAAQC,iBAC5B,OAAOa,MAAM,kDAAD,OAAmDtB,GAAQ,CACrEuB,QAAS,CACPC,cAAc,UAAD,OAAY3D,MAE1B4D,MAAK,SAAAC,GACN,OAAOA,EAASC,UACfF,MAAK,SAAAG,GACN,OAAKA,EAAa3C,OAGX2C,EAAa3C,OAAO4C,MAAM3C,KAAI,SAAAV,GAAK,MAAK,CAC7CW,GAAIX,EAAMW,GACVT,KAAMF,EAAME,KACZC,OAAQH,EAAMsD,QAAQ,GAAGpD,KACzBE,MAAOJ,EAAMI,MAAMF,KACnBqD,IAAKvD,EAAMuD,QAPJ,OAYbC,aA1CY,SA0CCtD,EAAMuD,GACjB,GAAKvD,GAASuD,EAAUC,OAAxB,CAIA,IAEIC,EAFEtE,EAAc2C,EAAQC,iBACtBc,EAAU,CAAEC,cAAc,UAAD,OAAY3D,IAG3C,OAAOyD,MAAM,gCAAiC,CAACC,QAASA,IACtDE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAEL,OADAO,EAASP,EAAazC,GACfmC,MAAM,oCAAD,OAAqCa,EAArC,cAAyD,CACnEZ,QAASA,EACTa,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CAAC7D,KAAMA,MAC3B+C,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC3BF,MAAK,SAAAG,GACL,IAAMY,EAAaZ,EAAazC,GAChC,OAAOmC,MAAM,oCAAD,OAAqCa,EAArC,sBAAyDK,EAAzD,WAA8E,CACxFjB,QAASA,EACTa,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CAACE,KAAMR,eAOvBzB,IMOFkC,E,kDA1Eb,WAAY3E,GAAQ,IAAD,8BACjB,cAAMA,IAEDgC,MAAQ,CACXQ,cAAe,GACfoC,aAAc,eACd/C,eAAgB,IAGlB,EAAKM,OAAS,EAAKA,OAAOjC,KAAZ,gBACd,EAAKD,SAAW,EAAKA,SAASC,KAAd,gBAChB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBACnB,EAAK2E,mBAAqB,EAAKA,mBAAmB3E,KAAxB,gBAC1B,EAAK+D,aAAe,EAAKA,aAAa/D,KAAlB,gBAbH,E,0CAgBnB,SAAO+B,GAAO,IAAD,OACXQ,EAAQN,OAAOF,GAAMyB,MAAK,SAAAlB,GACxB,EAAKJ,SAAS,CAACI,cAAeA,S,sBAIlC,SAAS/B,GACP,IAAIS,EAASd,KAAK4B,MAAMH,eACpBX,EAAO4D,MAAK,SAAAC,GAAU,OAAIA,EAAW3D,KAAOX,EAAMW,QAItDF,EAAO8D,KAAKvE,GACZL,KAAKgC,SAAS,CAACP,eAAgBX,O,yBAGjC,SAAYT,GACV,IAAIS,EAASd,KAAK4B,MAAMH,eACxBX,EAASA,EAAO+D,QAAO,SAAAC,GAAY,OAAIA,EAAa9D,KAAOX,EAAMW,MAEjEhB,KAAKgC,SAAS,CAACP,eAAgBX,M,gCAGjC,SAAmBP,GACjBP,KAAKgC,SAAS,CAACwC,aAAcjE,M,0BAG/B,WAAgB,IAAD,OACPuD,EAAY9D,KAAK4B,MAAMH,eAAeV,KAAI,SAAAV,GAAK,OAAIA,EAAMuD,OAC/DvB,EAAQwB,aAAa7D,KAAK4B,MAAM4C,aAAcV,GAAWR,MAAK,WAC5D,EAAKtB,SAAS,CACZwC,aAAc,eACd/C,eAAgB,U,oBAKtB,WACE,OACE,gCACE,oCAAM,sBAAMvB,UAAU,YAAhB,iBAAN,SACA,sBAAKA,UAAU,MAAf,UACE,cAAC,EAAD,CAAW+B,SAAUjC,KAAK+B,SAC1B,sBAAK7B,UAAU,eAAf,UACE,cAAC,EAAD,CAAekC,cAAepC,KAAK4B,MAAMQ,cAC1BhC,MAAOJ,KAAKH,WAC3B,cAAC,EAAD,CAAU2E,aAAcxE,KAAK4B,MAAM4C,aACzB/C,eAAgBzB,KAAK4B,MAAMH,eAC3BL,aAAcpB,KAAKyE,mBACnBnE,SAAUN,KAAKD,YACf2B,OAAQ1B,KAAK6D,4B,GAnEjBlD,IAAMC,WCITmE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB3B,MAAK,YAAkD,IAA/C4B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.919f3226.chunk.js","sourcesContent":["const clientId = '51541c3ee4494bbd9f98e709eb9de1ac';\nconst redirectUri = 'http://unsuitable-driving.surge.sh';\nlet accessToken;\n\nconst Spotify = {\n    getAccessToken() {\n      if (accessToken) {\n        return accessToken;\n      }\n  \n      const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n      const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n      if (accessTokenMatch && expiresInMatch) {\n        accessToken = accessTokenMatch[1];\n        const expiresIn = Number(expiresInMatch[1]);\n        window.setTimeout(() => accessToken = '', expiresIn * 1000);\n        window.history.pushState('Access Token', null, '/'); // This clears the parameters, allowing us to grab a new access token when it expires.\n        return accessToken;\n      } else {\n        const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n        window.location = accessUrl;\n      }\n    },\n  \n    search(term) {\n      const accessToken = Spotify.getAccessToken();\n      return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n        headers: {\n          Authorization: `Bearer ${accessToken}`\n        }\n      }).then(response => {\n        return response.json();\n      }).then(jsonResponse => {\n        if (!jsonResponse.tracks) {\n          return [];\n        }\n        return jsonResponse.tracks.items.map(track => ({\n          id: track.id,\n          name: track.name,\n          artist: track.artists[0].name,\n          album: track.album.name,\n          uri: track.uri\n        }));\n      });\n    },\n  \n    savePlaylist(name, trackUris) {\n      if (!name || !trackUris.length) {\n        return;\n      }\n  \n      const accessToken = Spotify.getAccessToken();\n      const headers = { Authorization: `Bearer ${accessToken}` };\n      let userId;\n  \n      return fetch('https://api.spotify.com/v1/me', {headers: headers}\n      ).then(response => response.json()\n      ).then(jsonResponse => {\n        userId = jsonResponse.id;\n        return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n          headers: headers,\n          method: 'POST',\n          body: JSON.stringify({name: name})\n        }).then(response => response.json()\n        ).then(jsonResponse => {\n          const playlistId = jsonResponse.id;\n          return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\n            headers: headers,\n            method: 'POST',\n            body: JSON.stringify({uris: trackUris})\n          });\n        });\n      });\n    }\n  };\n  \n  export default Spotify;","import React from 'react';\n\nimport './Track.css';\n\nclass Track extends React.Component{\n\n    constructor(props){\n        super(props);\n        this.addTrack = this.addTrack.bind(this);\n        this.removeTrack = this.removeTrack.bind(this);\n    }\n\n    renderAction(){\n        if (this.props.isRemoval){\n            return <button className=\"Track-action\" onClick={this.removeTrack}>-</button>\n        } else {\n            return <button className=\"Track-action\" onClick={this.addTrack}>+</button>\n        }\n    };\n\n    addTrack(){\n        this.props.onAdd(this.props.track);\n    };\n\n    removeTrack(){\n        this.props.onRemove(this.props.track);\n    };\n\n    render(){\n        return(\n            <div className=\"Track\">\n                <div className=\"Track-information\">\n                    <h3>{this.props.track.name}</h3>\n                    <p>{this.props.track.artist} | {this.props.track.album}</p>\n                </div>\n                {this.renderAction()}\n            </div>\n        )\n    }\n}\n\nexport default Track;","import React from 'react';\n\nimport './TrackList.css';\nimport Track from '../Track/Track';\n\nclass TrackList extends React.Component{\n    render(){\n        return (\n            <div className=\"TrackList\">\n                {\n                    this.props.tracks.map(track =>{\n                        return <Track track={track} \n                        key={track.id} \n                        onAdd={this.props.onAdd} \n                        onRemove ={this.props.onRemove}\n                        isRemoval={this.props.isRemoval}/>\n                    })\n                }\n            </div>\n        )\n    }\n}\n\nexport default TrackList;","import React from 'react';\n\nimport './Playlist.css';\nimport TrackList from '../TrackList/TrackList';\n\nclass Playlist extends React.Component{\n\n    constructor(props){\n        super(props);\n        this.handleNameChange = this.handleNameChange.bind(this);\n    }\n\n    handleNameChange(event){\n        this.props.onNameChange(event.target.value);\n    }\n\n    render(){\n        return (\n            <div className=\"Playlist\">\n                <input defaultValue={\"New Playlist\"} onChange={this.handleNameChange}/>\n                <TrackList tracks={this.props.playlistTracks}\n                onRemove={this.props.onRemove}\n                isRemoval={true}/>\n                <button className=\"Playlist-save\" onClick={this.props.onSave}>SAVE TO SPOTIFY</button>\n            </div>            \n        )\n    }\n}\n\nexport default Playlist;","import React from 'react';\n\nimport './SearchBar.css';\n\nclass SearchBar extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      term: ''\n    };\n\n    this.handleTermChange = this.handleTermChange.bind(this);\n    this.search = this.search.bind(this);\n  }\n\n  handleTermChange(event) {\n    this.setState({term: event.target.value});\n  }\n\n  search() {\n    this.props.onSearch(this.state.term);\n  }\n\n  render() {\n    return (\n      <div className=\"SearchBar\">\n        <input placeholder=\"Enter A Song Title\" onChange={this.handleTermChange} />\n        <button className=\"SearchButton\" onClick={this.search}>SEARCH</button>\n      </div>\n    );\n  }\n}\n\nexport default SearchBar;","import React from 'react';\n\nimport './SearchResults.css';\nimport TrackList from '../TrackList/TrackList';\n\nclass SearchResults extends React.Component{\n\n    render(){\n        return(\n            <div className=\"SearchResults\">\n                <h2>Results</h2>\n                <TrackList tracks={this.props.searchResults} onAdd={this.props.onAdd} isRemoval={false} />\n            </div>\n        )\n    }\n}\n\nexport default SearchResults;","import React from 'react';\nimport './App.css';\n\nimport Playlist from '../Playlist/Playlist';\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport Spotify from '../../util/Spotify';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      searchResults: [],\n      playlistName: 'New Playlist',\n      playlistTracks: []\n    };\n\n    this.search = this.search.bind(this);\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n  }\n\n  search(term) {\n    Spotify.search(term).then(searchResults => {\n      this.setState({searchResults: searchResults});\n    });\n  }\n\n  addTrack(track) {\n    let tracks = this.state.playlistTracks;\n    if (tracks.find(savedTrack => savedTrack.id === track.id)) {\n      return;\n    }\n\n    tracks.push(track);\n    this.setState({playlistTracks: tracks});\n  }\n\n  removeTrack(track) {\n    let tracks = this.state.playlistTracks;\n    tracks = tracks.filter(currentTrack => currentTrack.id !== track.id);\n\n    this.setState({playlistTracks: tracks});\n  }\n\n  updatePlaylistName(name) {\n    this.setState({playlistName: name});\n  }\n\n  savePlaylist() {\n    const trackUris = this.state.playlistTracks.map(track => track.uri);\n    Spotify.savePlaylist(this.state.playlistName, trackUris).then(() => {\n      this.setState({\n        playlistName: 'New Playlist',\n        playlistTracks: []\n      });\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n        <div className=\"App\">\n          <SearchBar onSearch={this.search} />\n          <div className=\"App-playlist\">\n            <SearchResults searchResults={this.state.searchResults}\n                           onAdd={this.addTrack} />\n            <Playlist playlistName={this.state.playlistName}\n                      playlistTracks={this.state.playlistTracks}\n                      onNameChange={this.updatePlaylistName}\n                      onRemove={this.removeTrack}\n                      onSave={this.savePlaylist} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}